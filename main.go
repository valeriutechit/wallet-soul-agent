package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	
	"net/http"
	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
	"wallet-soul-agent/agent"
)

func main() {
	r := mux.NewRouter()

	err := godotenv.Load()
	if err != nil {
		log.Fatal("‚ùå Error loading .env file")
	}

	if os.Getenv("TELEGRAM_BOT_TOKEN") == "" || os.Getenv("OPENAI_API_KEY") == "" {
		log.Fatal("‚ùå Set TELEGRAM_BOT_TOKEN and OPENAI_API_KEY in .env")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
	agent.StartTelegramBot()

	r.HandleFunc("/wallet/{address}", func(w http.ResponseWriter, r *http.Request) {
		vars := mux.Vars(r)
		address := vars["address"]
		report := agent.GenerateSoulReport(address)

		// –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ ‚Äî –∫—Ä–∞—Å–∏–≤–æ, –ø–æ—ç—Ç–∏—á–Ω–æ
		fmt.Fprintf(w, "üìç Address: %s\n", report.Address)
		fmt.Fprintf(w, "üß† Archetype: %s\n", report.Profile)
		fmt.Fprintf(w, "ü™û Reflection:\n%s\n", report.Reflection)
		fmt.Fprintf(w, "üíé Tokens:\n")
		for _, t := range report.Tokens {
			if t.UiAmount > 0 {
				fmt.Fprintf(w, " - %s: %.4f\n", t.Symbol, t.UiAmount)
			}
		}
	})

	r.HandleFunc("/api/wallet/{address}", func(w http.ResponseWriter, r *http.Request) {
		vars := mux.Vars(r)
		address := vars["address"]
		report := agent.GenerateSoulReport(address)

		// –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
		w.Header().Set("Content-Type", "application/json")

		// –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ JSON
		err := json.NewEncoder(w).Encode(report)
		if err != nil {
			http.Error(w, "Failed to encode response", http.StatusInternalServerError)
		}
	})

	r.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, "üëã Welcome to Wallet Soul Agent. Try /wallet/{address}")
	})

	fmt.Println("üöÄ Server started on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", r))
}

