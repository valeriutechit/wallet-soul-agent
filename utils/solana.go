// utils/solana.go
package utils

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

// –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ RPC
type SolanaRpcResponse struct {
	Jsonrpc string `json:"jsonrpc"`
	Result  struct {
		Context struct {
			ApiVersion string `json:"apiVersion"`
			Slot       uint64 `json:"slot"`
		} `json:"context"`
		Value uint64 `json:"value"`
	} `json:"result"`
	ID     string    `json:"id"`
	Error  *RPCError `json:"error,omitempty"`
}

type RPCError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type Token struct {
	Mint     string  `json:"mint"`
	Name     string  `json:"name"`
	Symbol   string  `json:"symbol"`
	UiAmount float64 `json:"amount"`
}

func FetchTokens(address string) ([]Token, error) {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π RPC-endpoint Solana
	url := "https://api.mainnet-beta.solana.com"
	
	fmt.Println("üîç Requesting from:", url)
	
	// –°–æ–∑–¥–∞–µ–º JSON-RPC –∑–∞–ø—Ä–æ—Å –¥–ª—è getBalance
	requestBody := map[string]interface{}{
		"jsonrpc": "2.0",
		"id":      "1",
		"method":  "getBalance",
		"params":  []interface{}{address},
	}
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ JSON
	requestJSON, err := json.Marshal(requestBody)
	if err != nil {
		fmt.Println("‚ùå Error marshaling request:", err)
		return nil, err
	}
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(requestJSON))
	if err != nil {
		fmt.Println("‚ùå Error during request:", err)
		return nil, err
	}
	defer resp.Body.Close()
	
	fmt.Printf("üîÑ RPC response status code: %d\n", resp.StatusCode)
	
	bodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("‚ùå Error reading response body:", err)
		return nil, err
	}
	
	fmt.Println("üì¶ Raw response:")
	fmt.Println(string(bodyBytes))
	
	// –†–∞–∑–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	var rpcResp SolanaRpcResponse
	if err := json.Unmarshal(bodyBytes, &rpcResp); err != nil {
		fmt.Println("‚ùå Error unmarshaling JSON:", err)
		return nil, err
	}
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ RPC
	if rpcResp.Error != nil {
		return nil, fmt.Errorf("RPC error %d: %s", rpcResp.Error.Code, rpcResp.Error.Message)
	}
	
	// –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ lamports
	lamports := rpcResp.Result.Value
	
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º lamports –≤ SOL (1 SOL = 10^9 lamports)
	solBalance := float64(lamports) / 1000000000.0
	
	fmt.Printf("‚úÖ Successfully retrieved SOL balance: %f SOL\n", solBalance)
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω —Ç–æ–∫–µ–Ω, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π SOL
	tokens := []Token{
		{
			Mint:     "So11111111111111111111111111111111111111112", // Native SOL mint address
			Name:     "Solana",
			Symbol:   "SOL",
			UiAmount: solBalance,
		},
	}
	
	return tokens, nil
}